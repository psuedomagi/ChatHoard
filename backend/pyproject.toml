[tool.poetry]
name = "app"
version = "0.0.1"
license = "MIT"
repository = "https://github.com/psuedomagi/ChatHoard"
description = "ChatHoard is a ready-to-deploy full-stack web app for making the most of your ChatGPT chat history (other chat formats planned). ChatHoard offers multiple deployment options, web ui management, powerful search, and more."
authors = ["Adam Poulemanos <mule_menthol0t at icloud.com>"]

[tool.poetry.dependencies]
python = "^3.12"
uvicorn = { extras = ["standard"], version = "^0.30.1" }
fastapi = "^0.111.0"
python-multipart = "^0.0.9"
email-validator = "^2.1.2"
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
tenacity = "^8.4.1"
pydantic = "^2.7.4"
emails = "^0.6"

gunicorn = "^22.0.0"
jinja2 = "^3.1.4"
alembic = "^1.13.1"
httpx = "^0.27.0"
psycopg = { extras = ["binary"], version = "^3.1.19" }
sqlmodel = "^0.0.19"
# Pin bcrypt until passlib supports the latest
bcrypt = "4.0.1"
pydantic-settings = "^2.3.3"
sentry-sdk = { extras = ["fastapi"], version = "^2.5.1" }
pyjwt = "^2.8.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
mypy = "^1.10.0"
ruff = "^0.4.9"
pre-commit = "^3.7.1"
types-passlib = "^1.7.7.20240106"
coverage = "^7.5.3"

[build-system]
requires = ["poetry>=1.8.3"]
build-backend = "poetry.masonry.api"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py312"
fix = true
line-length = 100
indent-width = 4
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "alembic",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80
line-ending = "auto"
indent-style = "space"

skip-magic-trailing-comma = true

exclude = [
    "**/_vendor",
    ".git",
    ".github",
    ".idea",
    ".venv",
    ".vscode",
    "bin",
    "build",
    "dist",
    "docs",
    "include",
    "lib",
    "setuptools/_distutils",
    "setuptools/config/_validate_pyproject",
    "site",
]
# Enable preview, required for quote-style = "preserve"
preview = true
# https://docs.astral.sh/ruff/settings/#format-quote-style
quote-style = "double"


[tool.ruff.lint]
select = [
    "A003",     # assert statement with a tuple
    "ANN002",   # missing type annotation for a variable
    "ANN201",   # missing type annotation for self in a class
    "ARG001",   # unused arguments in functions
    "ASYNC100", # missing async with
    "ASYNC101", # missing await in async function
    "ASYNC102", # missing await in async comprehension
    "B",        # bugbear
    "C",        # complexity
    "C901",     # function is too complex
    "COM818",   # missing type annotation for a variable
    "D",        # docstring
    "DTZ005",   # timezone-naive datetime
    "DTZ007",   # timezone-naive datetime
    "E",        # pycodestyle errors
    "F",        # pyflakes
    "FBT001",   # assert False
    "G",        # logging
    "I",        # isort
    "LOG",
    "PD",
    "S",
    "SIM",
    "UP",       # pyupgrade
    "W",        # pycodestyle warnings
    "YTT",
]
ignore = [
    "B008",   # do not perform function calls in argument defaults
    "B904",   # Allow raising exceptions without from e, for HTTPException
    "COM812",
    "COM819",
    "D100",
    "D103",
    "D104",
    "D200",
    "D206",
    "D212",
    "D300",
    "D417",
    "E111",
    "E114",
    "E117",
    "E402",
    "E501",   # line too long, handled by black
    "ISC001",
    "ISC002",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "S101",

    "UP015",
    "W191",   # indentation contains tabs
]

[tool.ruff.lint.isort]
force-single-line = false
force-wrap-aliases = false
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
